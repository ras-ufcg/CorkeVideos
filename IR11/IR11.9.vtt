WEBVTT
Kind: captions
Language: pt-BR

00:00:03.530 --> 00:00:07.310
Cobrimos uma grande parte do terreno nesta 
palestra em particular, então vamos resumir alguns

00:00:07.310 --> 00:00:10.080
dos pontos mais importantes.

00:00:10.080 --> 00:00:14.249
Na última palestra, consideramos um caso de controle 
bastante simplista. Nós chamamos de controle de

00:00:14.249 --> 00:00:19.350
junta independente e ignoramos fatos como 
gravidade, mas em um robô real como o robô PUMA,

00:00:19.350 --> 00:00:23.770
mostrado aqui nesta configuração em particular,
podemos imaginar o torque requerido na junta do

00:00:23.770 --> 00:00:30.770
do ombro e do cotovelo para impedir o colapso do 
robô sob o efeito da gravidade.

00:00:31.060 --> 00:00:36.780
Então, esse era o controle de junta que tínhamos
para o caso do controle independente e o modificamos. 

00:00:36.780 --> 00:00:41.379
Introduzimos o torque de perturbação, e isso 
pode ser devido ao atrito não linear

00:00:41.379 --> 00:00:46.140
ou devido à gravidade. Essa é a força de 
perturbação TD.

00:00:46.140 --> 00:00:50.210
E quando olhamos para o efeito que o torque de 
perturbação tem na posição da junta

00:00:50.210 --> 00:00:55.219
e pode ser significativo, então é algo com que
precisamos lidar.

00:00:55.219 --> 00:01:00.519
Em seguida, consideramos um caso bem simples: um 
único motor conectado a uma ligação, e a ligação

00:01:00.519 --> 00:01:05.350
possui massa. Se uma junta é controlada por um
controlador PD, um tipo bastante típico de controlador

00:01:05.350 --> 00:01:11.130
para uma junta do robô, então vimos que o efeito
da gravidade é desviar a junta, introduzindo

00:01:11.130 --> 00:01:16.700
um erro no posicionamento. O ângulo da 
junta não é o ângulo desejado. E a quantidade

00:01:16.700 --> 00:01:22.219
desse erro é inversamente proporcional ao
ganho do controlador P, então se queremos gerar

00:01:22.219 --> 00:01:28.000
um erro bastante pequeno, precisamos ter um ganho
bem alto. Mas, vimos que existem algumas consequências

00:01:28.000 --> 00:01:33.979
com o aumento do ganho, em particular, aumentou o 
sobressinal em nosso sistema de controle de junta.

00:01:33.979 --> 00:01:38.759
Outra estratégia que encontramos foi
introduzir um termo integral. Isto é,  

00:01:38.759 --> 00:01:43.479
um termo que aumenta enquanto existir um erro 
na posição, aumentando o torque na junta

00:01:43.479 --> 00:01:46.770
até o erro ser eliminado.

00:01:46.770 --> 00:01:51.189
Outra estratégia que observamos é o controlador
feedfoward. E aqui, assumimos que podemos estimar

00:01:51.189 --> 00:01:55.829
o torque de perturbação e no caso da gravidade,
esse é certamente o caso. Então,

00:01:55.829 --> 00:02:01.289
estimamos qual deve ser a gravidade, multiplicamos
por um ganho e introduzimos o valor na saída

00:02:01.289 --> 00:02:04.539
do nosso controlador. E isso cancela a
perturbação real.

00:02:04.539 --> 00:02:10.310
Esta é uma técnica que funciona bem mesmo que nossa
estimativa não é muito precisa. O Cancelamento parcial

00:02:10.310 --> 00:02:14.450
da perturbação é melhor que nenhum
cancelamento.

00:02:14.450 --> 00:02:19.290
Em seguida, consideramos os parâmetros dinâmicos
de um manipulador de ligações seriais.

00:02:19.290 --> 00:02:22.530
Já vimos esse robô simples quando estávamos estudando cinemática.

00:02:22.530 --> 00:02:24.760
Agora queremos entender a dinâmica disso.

00:02:24.760 --> 00:02:29.040
Então, indicamos o centro de massa de cada
uma das ligações, e descrevemos a posição

00:02:29.040 --> 00:02:34.040
do centro de massa de cada ligação com respeito
para o sistema de coordenadas de ligações e a inércia

00:02:34.040 --> 00:02:40.599
de cada ligação. A massa é um escalar, a posição
do centro de massa é um vetor de três elementos,

00:02:40.599 --> 00:02:45.440
e a inércia é uma matriz três por três, é uma
matriz simétrica, então ela realmente tem

00:02:45.440 --> 00:02:52.299
apenas seis elementos únicos. Então, cada ligação é
portanto, descrita por dez parâmetros dinâmicos.

00:02:52.299 --> 00:02:56.299
A dinâmica dos corpos em movimento é descrita
por uma série de técnicas matemáticas. E

00:02:56.299 --> 00:03:02.099
usamos uma combinação da segunda lei de Newton,
F é igual a MA e equação de Euler para o movimento

00:03:02.099 --> 00:03:05.620
rotacional. Juntas, chamamos isso de método 
Newton-Euler.

00:03:05.620 --> 00:03:11.230
E então descrevemos um algoritmo de computador 
muito eficiente, o algoritmo recursivo de Newton-Euler,

00:03:11.230 --> 00:03:18.720
o qual podemos usar no MATLAB para calcular torques
de junta em função de Q, Q ponto e Q dois pontos.

00:03:18.720 --> 00:03:23.269
Não entramos nos detalhes do método recursivo
Newton-Euler. Você pode achar os detalhes

00:03:23.269 --> 00:03:28.360
em vários livros e também pode olhar no 
código exibido pela Toolbox.

00:03:28.360 --> 00:03:34.360
As expressões para o torque de junta do robô em
função de Q, Q ponto e Q dois pontos são

00:03:34.360 --> 00:03:39.000
até um pouco complicadas, mas elas podem ser
fatoradas e expressas de forma concisa

00:03:39.000 --> 00:03:45.970
em uma equação matricial. Daí o torque aplicado à
junta implica em um termo inercial, em um termo de

00:03:45.970 --> 00:03:51.459
Coriolis e centrípeto, e em um termo de gravidade. Nós
vamos passar um tempinho investigando

00:03:51.459 --> 00:03:55.360
detalhadamente cada um desses termos.

00:03:55.360 --> 00:04:00.040
No que tange ao controle de uma junta específica
de um robô, as coisas são bem mais complicadas do que

00:04:00.040 --> 00:04:04.819
elas eram na situação do controle de junta
independente. Antes, tínhamos que lidar apenas

00:04:04.819 --> 00:04:08.790
com os dois primeiros termos. Agora temos que lidar com 
torques que são causados pela aceleração de todas

00:04:08.790 --> 00:04:14.900
as outras juntas do robô, com a velocidade de
todas as outras juntas do robô e com a influência da gravidade.

00:04:14.900 --> 00:04:20.000
Com alguma manipulação matemática, podemos
visualizar isso com uma equação um tanto concisa,

00:04:20.000 --> 00:04:24.570
que se apresenta assim. E a linha de baixo
mostra que a inércia da junta do robô é

00:04:24.570 --> 00:04:29.910
uma função da configuração de todo o
robô, não é mais uma constante.

00:04:29.910 --> 00:04:34.810
Temos o termo de fricção viscosa e temos
o termo de perturbação de torque, o qual é causado

00:04:34.810 --> 00:04:40.560
pela aceleração e pela velocidade de todas as outras
juntas do robô. Inércia com variação no tempo é um

00:04:40.560 --> 00:04:44.340
pequeno problema porque ela dificulta
o ajuste do sistema de controle na obtenção do

00:04:44.340 --> 00:04:47.580
melhor tempo de adequação e sobressinal.

00:04:47.580 --> 00:04:51.220
O torque de perturbação significa mais trabalho para
o controlador de junta. Ele deve obter uma alta

00:04:51.220 --> 00:04:57.699
performance para conseguir ignorar o torque de
perturbação e desempenhar objetivos com ordem e precisão.

00:04:57.699 --> 00:05:02.860
Existem algumas técnicas que ajudam na eliminação desses efeitos 
da dinâmica de um corpo rígido, como introduzir uma caixa de 

00:05:02.860 --> 00:05:07.889
transmissão. Ela reduz a inércia dependente de configuração,
a qual torna a inércia quase independente da

00:05:07.889 --> 00:05:13.880
configuração do robô e atenua consideravelmente
o torque de perturbação. Uma caixa de transmissão é um

00:05:13.880 --> 00:05:21.200
truque simples e a maioria dos robôs possuem ela 
para amplificar o torque de motores elétricos de alta velocidade.

00:05:21.800 --> 00:05:28.460
Podemos aplicar também uma técnica de cálculo
chamada controle de torque de alimentação direta ou controle

00:05:28.460 --> 00:05:33.169
de torque calculado. Efetivamente, o que estamos 
fazendo aqui é trocar o custo e a complexidade 

00:05:33.169 --> 00:05:37.410
mecânica - por exemplo, a adição de uma caixa de
transmissão - com cálculo. O cálculo está

00:05:37.410 --> 00:05:41.050
ficando mais e mais acessível a cada ano.

00:05:41.050 --> 00:05:46.360
Podemos rearranjar as equações de movimento
de corpos rígidos dessa forma. Podemos obter uma expressão

00:05:46.360 --> 00:05:52.240
para Q ponto ponto - a aceleração da junta - em
relação ao toque que apliquei a um robô.

00:05:52.240 --> 00:05:56.800
Eu posso integrar a aceleração para obter velocidade,
integrada novamente para obter posição, e agora

00:05:56.800 --> 00:06:01.370
o que tenho é a dinâmica direta do
manipulador de robô. Essa é uma função que

00:06:01.370 --> 00:06:06.289
me dá o movimento do robô como uma função
do torque. E isso é bastante útil quando

00:06:06.289 --> 00:06:12.430
eu quero simular a movimentação do robô em um ambiente
do mundo real com um controle que eu tenha projetado.
